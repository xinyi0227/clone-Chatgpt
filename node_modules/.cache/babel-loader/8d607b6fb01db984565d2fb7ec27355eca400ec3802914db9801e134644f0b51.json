{"ast":null,"code":"\"use strict\";\n\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Completions = exports.ChatCompletionStream = exports.ParsingToolFunction = exports.ParsingFunction = exports.ChatCompletionStreamingRunner = exports.ChatCompletionRunner = void 0;\nconst resource_1 = require(\"../../../resource.js\");\nconst ChatCompletionRunner_1 = require(\"../../../lib/ChatCompletionRunner.js\");\nvar ChatCompletionRunner_2 = require(\"../../../lib/ChatCompletionRunner.js\");\nObject.defineProperty(exports, \"ChatCompletionRunner\", {\n  enumerable: true,\n  get: function () {\n    return ChatCompletionRunner_2.ChatCompletionRunner;\n  }\n});\nconst ChatCompletionStreamingRunner_1 = require(\"../../../lib/ChatCompletionStreamingRunner.js\");\nvar ChatCompletionStreamingRunner_2 = require(\"../../../lib/ChatCompletionStreamingRunner.js\");\nObject.defineProperty(exports, \"ChatCompletionStreamingRunner\", {\n  enumerable: true,\n  get: function () {\n    return ChatCompletionStreamingRunner_2.ChatCompletionStreamingRunner;\n  }\n});\nvar RunnableFunction_1 = require(\"../../../lib/RunnableFunction.js\");\nObject.defineProperty(exports, \"ParsingFunction\", {\n  enumerable: true,\n  get: function () {\n    return RunnableFunction_1.ParsingFunction;\n  }\n});\nObject.defineProperty(exports, \"ParsingToolFunction\", {\n  enumerable: true,\n  get: function () {\n    return RunnableFunction_1.ParsingToolFunction;\n  }\n});\nconst ChatCompletionStream_1 = require(\"../../../lib/ChatCompletionStream.js\");\nconst parser_1 = require(\"../../../lib/parser.js\");\nvar ChatCompletionStream_2 = require(\"../../../lib/ChatCompletionStream.js\");\nObject.defineProperty(exports, \"ChatCompletionStream\", {\n  enumerable: true,\n  get: function () {\n    return ChatCompletionStream_2.ChatCompletionStream;\n  }\n});\nclass Completions extends resource_1.APIResource {\n  parse(body, options) {\n    (0, parser_1.validateInputTools)(body.tools);\n    return this._client.chat.completions.create(body, {\n      ...options,\n      headers: {\n        ...options?.headers,\n        'X-Stainless-Helper-Method': 'beta.chat.completions.parse'\n      }\n    })._thenUnwrap(completion => (0, parser_1.parseChatCompletion)(completion, body));\n  }\n  runFunctions(body, options) {\n    if (body.stream) {\n      return ChatCompletionStreamingRunner_1.ChatCompletionStreamingRunner.runFunctions(this._client, body, options);\n    }\n    return ChatCompletionRunner_1.ChatCompletionRunner.runFunctions(this._client, body, options);\n  }\n  runTools(body, options) {\n    if (body.stream) {\n      return ChatCompletionStreamingRunner_1.ChatCompletionStreamingRunner.runTools(this._client, body, options);\n    }\n    return ChatCompletionRunner_1.ChatCompletionRunner.runTools(this._client, body, options);\n  }\n  /**\n   * Creates a chat completion stream\n   */\n  stream(body, options) {\n    return ChatCompletionStream_1.ChatCompletionStream.createChatCompletion(this._client, body, options);\n  }\n}\nexports.Completions = Completions;","map":{"version":3,"names":["resource_1","require","ChatCompletionRunner_1","ChatCompletionRunner_2","Object","defineProperty","exports","enumerable","get","ChatCompletionRunner","ChatCompletionStreamingRunner_1","ChatCompletionStreamingRunner_2","ChatCompletionStreamingRunner","RunnableFunction_1","ParsingFunction","ParsingToolFunction","ChatCompletionStream_1","parser_1","ChatCompletionStream_2","ChatCompletionStream","Completions","APIResource","parse","body","options","validateInputTools","tools","_client","chat","completions","create","headers","_thenUnwrap","completion","parseChatCompletion","runFunctions","stream","runTools","createChatCompletion"],"sources":["C:\\Users\\user\\Desktop\\ReactJS\\chatgpt-clone\\node_modules\\openai\\src\\resources\\beta\\chat\\completions.ts"],"sourcesContent":["// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nimport * as Core from '../../../core';\nimport { APIResource } from '../../../resource';\nimport { ChatCompletionRunner, ChatCompletionFunctionRunnerParams } from '../../../lib/ChatCompletionRunner';\nexport { ChatCompletionRunner, ChatCompletionFunctionRunnerParams } from '../../../lib/ChatCompletionRunner';\nimport {\n  ChatCompletionStreamingRunner,\n  ChatCompletionStreamingFunctionRunnerParams,\n} from '../../../lib/ChatCompletionStreamingRunner';\nexport {\n  ChatCompletionStreamingRunner,\n  ChatCompletionStreamingFunctionRunnerParams,\n} from '../../../lib/ChatCompletionStreamingRunner';\nimport { BaseFunctionsArgs } from '../../../lib/RunnableFunction';\nexport {\n  RunnableFunction,\n  RunnableFunctions,\n  RunnableFunctionWithParse,\n  RunnableFunctionWithoutParse,\n  ParsingFunction,\n  ParsingToolFunction,\n} from '../../../lib/RunnableFunction';\nimport { RunnerOptions } from '../../../lib/AbstractChatCompletionRunner';\nimport { ChatCompletionToolRunnerParams } from '../../../lib/ChatCompletionRunner';\nexport { ChatCompletionToolRunnerParams } from '../../../lib/ChatCompletionRunner';\nimport { ChatCompletionStreamingToolRunnerParams } from '../../../lib/ChatCompletionStreamingRunner';\nexport { ChatCompletionStreamingToolRunnerParams } from '../../../lib/ChatCompletionStreamingRunner';\nimport { ChatCompletionStream, type ChatCompletionStreamParams } from '../../../lib/ChatCompletionStream';\nimport {\n  ChatCompletion,\n  ChatCompletionCreateParamsNonStreaming,\n  ChatCompletionMessage,\n  ChatCompletionMessageToolCall,\n} from '../../chat/completions';\nimport { ExtractParsedContentFromParams, parseChatCompletion, validateInputTools } from '../../../lib/parser';\nexport { ChatCompletionStream, type ChatCompletionStreamParams } from '../../../lib/ChatCompletionStream';\n\nexport interface ParsedFunction extends ChatCompletionMessageToolCall.Function {\n  parsed_arguments?: unknown;\n}\n\nexport interface ParsedFunctionToolCall extends ChatCompletionMessageToolCall {\n  function: ParsedFunction;\n}\n\nexport interface ParsedChatCompletionMessage<ParsedT> extends ChatCompletionMessage {\n  parsed: ParsedT | null;\n  tool_calls: Array<ParsedFunctionToolCall>;\n}\n\nexport interface ParsedChoice<ParsedT> extends ChatCompletion.Choice {\n  message: ParsedChatCompletionMessage<ParsedT>;\n}\n\nexport interface ParsedChatCompletion<ParsedT> extends ChatCompletion {\n  choices: Array<ParsedChoice<ParsedT>>;\n}\n\nexport type ChatCompletionParseParams = ChatCompletionCreateParamsNonStreaming;\n\nexport class Completions extends APIResource {\n  parse<Params extends ChatCompletionParseParams, ParsedT = ExtractParsedContentFromParams<Params>>(\n    body: Params,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<ParsedChatCompletion<ParsedT>> {\n    validateInputTools(body.tools);\n\n    return this._client.chat.completions\n      .create(body, {\n        ...options,\n        headers: {\n          ...options?.headers,\n          'X-Stainless-Helper-Method': 'beta.chat.completions.parse',\n        },\n      })\n      ._thenUnwrap((completion) => parseChatCompletion(completion, body));\n  }\n\n  /**\n   * @deprecated - use `runTools` instead.\n   */\n  runFunctions<FunctionsArgs extends BaseFunctionsArgs>(\n    body: ChatCompletionFunctionRunnerParams<FunctionsArgs>,\n    options?: Core.RequestOptions,\n  ): ChatCompletionRunner<null>;\n  runFunctions<FunctionsArgs extends BaseFunctionsArgs>(\n    body: ChatCompletionStreamingFunctionRunnerParams<FunctionsArgs>,\n    options?: Core.RequestOptions,\n  ): ChatCompletionStreamingRunner<null>;\n  runFunctions<FunctionsArgs extends BaseFunctionsArgs>(\n    body:\n      | ChatCompletionFunctionRunnerParams<FunctionsArgs>\n      | ChatCompletionStreamingFunctionRunnerParams<FunctionsArgs>,\n    options?: Core.RequestOptions,\n  ): ChatCompletionRunner<null> | ChatCompletionStreamingRunner<null> {\n    if (body.stream) {\n      return ChatCompletionStreamingRunner.runFunctions(\n        this._client,\n        body as ChatCompletionStreamingFunctionRunnerParams<FunctionsArgs>,\n        options,\n      );\n    }\n    return ChatCompletionRunner.runFunctions(\n      this._client,\n      body as ChatCompletionFunctionRunnerParams<FunctionsArgs>,\n      options,\n    );\n  }\n\n  /**\n   * A convenience helper for using tool calls with the /chat/completions endpoint\n   * which automatically calls the JavaScript functions you provide and sends their\n   * results back to the /chat/completions endpoint, looping as long as the model\n   * requests function calls.\n   *\n   * For more details and examples, see\n   * [the docs](https://github.com/openai/openai-node#automated-function-calls)\n   */\n  runTools<\n    Params extends ChatCompletionToolRunnerParams<any>,\n    ParsedT = ExtractParsedContentFromParams<Params>,\n  >(body: Params, options?: RunnerOptions): ChatCompletionRunner<ParsedT>;\n\n  runTools<\n    Params extends ChatCompletionStreamingToolRunnerParams<any>,\n    ParsedT = ExtractParsedContentFromParams<Params>,\n  >(body: Params, options?: RunnerOptions): ChatCompletionStreamingRunner<ParsedT>;\n\n  runTools<\n    Params extends ChatCompletionToolRunnerParams<any> | ChatCompletionStreamingToolRunnerParams<any>,\n    ParsedT = ExtractParsedContentFromParams<Params>,\n  >(\n    body: Params,\n    options?: RunnerOptions,\n  ): ChatCompletionRunner<ParsedT> | ChatCompletionStreamingRunner<ParsedT> {\n    if (body.stream) {\n      return ChatCompletionStreamingRunner.runTools(\n        this._client,\n        body as ChatCompletionStreamingToolRunnerParams<any>,\n        options,\n      );\n    }\n\n    return ChatCompletionRunner.runTools(this._client, body as ChatCompletionToolRunnerParams<any>, options);\n  }\n\n  /**\n   * Creates a chat completion stream\n   */\n  stream<Params extends ChatCompletionStreamParams, ParsedT = ExtractParsedContentFromParams<Params>>(\n    body: Params,\n    options?: Core.RequestOptions,\n  ): ChatCompletionStream<ParsedT> {\n    return ChatCompletionStream.createChatCompletion(this._client, body, options);\n  }\n}\n"],"mappings":";;AAAA;;;;;AAGA,MAAAA,UAAA,GAAAC,OAAA;AACA,MAAAC,sBAAA,GAAAD,OAAA;AACA,IAAAE,sBAAA,GAAAF,OAAA;AAASG,MAAA,CAAAC,cAAA,CAAAC,OAAA;EAAAC,UAAA;EAAAC,GAAA,WAAAA,CAAA;IAAA,OAAAL,sBAAA,CAAAM,oBAAoB;EAAA;AAAA;AAC7B,MAAAC,+BAAA,GAAAT,OAAA;AAIA,IAAAU,+BAAA,GAAAV,OAAA;AACEG,MAAA,CAAAC,cAAA,CAAAC,OAAA;EAAAC,UAAA;EAAAC,GAAA,WAAAA,CAAA;IAAA,OAAAG,+BAAA,CAAAC,6BAA6B;EAAA;AAAA;AAI/B,IAAAC,kBAAA,GAAAZ,OAAA;AAKEG,MAAA,CAAAC,cAAA,CAAAC,OAAA;EAAAC,UAAA;EAAAC,GAAA,WAAAA,CAAA;IAAA,OAAAK,kBAAA,CAAAC,eAAe;EAAA;AAAA;AACfV,MAAA,CAAAC,cAAA,CAAAC,OAAA;EAAAC,UAAA;EAAAC,GAAA,WAAAA,CAAA;IAAA,OAAAK,kBAAA,CAAAE,mBAAmB;EAAA;AAAA;AAOrB,MAAAC,sBAAA,GAAAf,OAAA;AAOA,MAAAgB,QAAA,GAAAhB,OAAA;AACA,IAAAiB,sBAAA,GAAAjB,OAAA;AAASG,MAAA,CAAAC,cAAA,CAAAC,OAAA;EAAAC,UAAA;EAAAC,GAAA,WAAAA,CAAA;IAAA,OAAAU,sBAAA,CAAAC,oBAAoB;EAAA;AAAA;AAyB7B,MAAaC,WAAY,SAAQpB,UAAA,CAAAqB,WAAW;EAC1CC,KAAKA,CACHC,IAAY,EACZC,OAA6B;IAE7B,IAAAP,QAAA,CAAAQ,kBAAkB,EAACF,IAAI,CAACG,KAAK,CAAC;IAE9B,OAAO,IAAI,CAACC,OAAO,CAACC,IAAI,CAACC,WAAW,CACjCC,MAAM,CAACP,IAAI,EAAE;MACZ,GAAGC,OAAO;MACVO,OAAO,EAAE;QACP,GAAGP,OAAO,EAAEO,OAAO;QACnB,2BAA2B,EAAE;;KAEhC,CAAC,CACDC,WAAW,CAAEC,UAAU,IAAK,IAAAhB,QAAA,CAAAiB,mBAAmB,EAACD,UAAU,EAAEV,IAAI,CAAC,CAAC;EACvE;EAaAY,YAAYA,CACVZ,IAE8D,EAC9DC,OAA6B;IAE7B,IAAID,IAAI,CAACa,MAAM,EAAE;MACf,OAAO1B,+BAAA,CAAAE,6BAA6B,CAACuB,YAAY,CAC/C,IAAI,CAACR,OAAO,EACZJ,IAAkE,EAClEC,OAAO,CACR;;IAEH,OAAOtB,sBAAA,CAAAO,oBAAoB,CAAC0B,YAAY,CACtC,IAAI,CAACR,OAAO,EACZJ,IAAyD,EACzDC,OAAO,CACR;EACH;EAqBAa,QAAQA,CAINd,IAAY,EACZC,OAAuB;IAEvB,IAAID,IAAI,CAACa,MAAM,EAAE;MACf,OAAO1B,+BAAA,CAAAE,6BAA6B,CAACyB,QAAQ,CAC3C,IAAI,CAACV,OAAO,EACZJ,IAAoD,EACpDC,OAAO,CACR;;IAGH,OAAOtB,sBAAA,CAAAO,oBAAoB,CAAC4B,QAAQ,CAAC,IAAI,CAACV,OAAO,EAAEJ,IAA2C,EAAEC,OAAO,CAAC;EAC1G;EAEA;;;EAGAY,MAAMA,CACJb,IAAY,EACZC,OAA6B;IAE7B,OAAOR,sBAAA,CAAAG,oBAAoB,CAACmB,oBAAoB,CAAC,IAAI,CAACX,OAAO,EAAEJ,IAAI,EAAEC,OAAO,CAAC;EAC/E;;AA9FFlB,OAAA,CAAAc,WAAA,GAAAA,WAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}