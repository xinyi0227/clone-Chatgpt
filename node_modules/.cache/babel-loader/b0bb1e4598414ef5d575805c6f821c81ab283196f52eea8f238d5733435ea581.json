{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateInputTools = exports.hasAutoParseableInput = exports.shouldParseToolCall = exports.parseChatCompletion = exports.maybeParseChatCompletion = exports.isAutoParsableTool = exports.makeParseableTool = exports.isAutoParsableResponseFormat = exports.makeParseableResponseFormat = void 0;\nconst error_1 = require(\"openai/error\");\nfunction makeParseableResponseFormat(response_format, parser) {\n  const obj = {\n    ...response_format\n  };\n  Object.defineProperties(obj, {\n    $brand: {\n      value: 'auto-parseable-response-format',\n      enumerable: false\n    },\n    $parseRaw: {\n      value: parser,\n      enumerable: false\n    }\n  });\n  return obj;\n}\nexports.makeParseableResponseFormat = makeParseableResponseFormat;\nfunction isAutoParsableResponseFormat(response_format) {\n  return response_format?.['$brand'] === 'auto-parseable-response-format';\n}\nexports.isAutoParsableResponseFormat = isAutoParsableResponseFormat;\nfunction makeParseableTool(tool, {\n  parser,\n  callback\n}) {\n  const obj = {\n    ...tool\n  };\n  Object.defineProperties(obj, {\n    $brand: {\n      value: 'auto-parseable-tool',\n      enumerable: false\n    },\n    $parseRaw: {\n      value: parser,\n      enumerable: false\n    },\n    $callback: {\n      value: callback,\n      enumerable: false\n    }\n  });\n  return obj;\n}\nexports.makeParseableTool = makeParseableTool;\nfunction isAutoParsableTool(tool) {\n  return tool?.['$brand'] === 'auto-parseable-tool';\n}\nexports.isAutoParsableTool = isAutoParsableTool;\nfunction maybeParseChatCompletion(completion, params) {\n  if (!params || !hasAutoParseableInput(params)) {\n    return {\n      ...completion,\n      choices: completion.choices.map(choice => ({\n        ...choice,\n        message: {\n          ...choice.message,\n          parsed: null,\n          tool_calls: choice.message.tool_calls ?? []\n        }\n      }))\n    };\n  }\n  return parseChatCompletion(completion, params);\n}\nexports.maybeParseChatCompletion = maybeParseChatCompletion;\nfunction parseChatCompletion(completion, params) {\n  const choices = completion.choices.map(choice => {\n    if (choice.finish_reason === 'length') {\n      throw new error_1.LengthFinishReasonError();\n    }\n    if (choice.finish_reason === 'content_filter') {\n      throw new error_1.ContentFilterFinishReasonError();\n    }\n    return {\n      ...choice,\n      message: {\n        ...choice.message,\n        tool_calls: choice.message.tool_calls?.map(toolCall => parseToolCall(params, toolCall)) ?? [],\n        parsed: choice.message.content && !choice.message.refusal ? parseResponseFormat(params, choice.message.content) : null\n      }\n    };\n  });\n  return {\n    ...completion,\n    choices\n  };\n}\nexports.parseChatCompletion = parseChatCompletion;\nfunction parseResponseFormat(params, content) {\n  if (params.response_format?.type !== 'json_schema') {\n    return null;\n  }\n  if (params.response_format?.type === 'json_schema') {\n    if ('$parseRaw' in params.response_format) {\n      const response_format = params.response_format;\n      return response_format.$parseRaw(content);\n    }\n    return JSON.parse(content);\n  }\n  return null;\n}\nfunction parseToolCall(params, toolCall) {\n  const inputTool = params.tools?.find(inputTool => inputTool.function?.name === toolCall.function.name);\n  return {\n    ...toolCall,\n    function: {\n      ...toolCall.function,\n      parsed_arguments: isAutoParsableTool(inputTool) ? inputTool.$parseRaw(toolCall.function.arguments) : inputTool?.function.strict ? JSON.parse(toolCall.function.arguments) : null\n    }\n  };\n}\nfunction shouldParseToolCall(params, toolCall) {\n  if (!params) {\n    return false;\n  }\n  const inputTool = params.tools?.find(inputTool => inputTool.function?.name === toolCall.function.name);\n  return isAutoParsableTool(inputTool) || inputTool?.function.strict || false;\n}\nexports.shouldParseToolCall = shouldParseToolCall;\nfunction hasAutoParseableInput(params) {\n  if (isAutoParsableResponseFormat(params.response_format)) {\n    return true;\n  }\n  return params.tools?.some(t => isAutoParsableTool(t) || t.type === 'function' && t.function.strict === true) ?? false;\n}\nexports.hasAutoParseableInput = hasAutoParseableInput;\nfunction validateInputTools(tools) {\n  for (const tool of tools ?? []) {\n    if (tool.type !== 'function') {\n      throw new error_1.OpenAIError(`Currently only \\`function\\` tool types support auto-parsing; Received \\`${tool.type}\\``);\n    }\n    if (tool.function.strict !== true) {\n      throw new error_1.OpenAIError(`The \\`${tool.function.name}\\` tool is not marked with \\`strict: true\\`. Only strict function tools can be auto-parsed`);\n    }\n  }\n}\nexports.validateInputTools = validateInputTools;","map":{"version":3,"names":["error_1","require","makeParseableResponseFormat","response_format","parser","obj","Object","defineProperties","$brand","value","enumerable","$parseRaw","exports","isAutoParsableResponseFormat","makeParseableTool","tool","callback","$callback","isAutoParsableTool","maybeParseChatCompletion","completion","params","hasAutoParseableInput","choices","map","choice","message","parsed","tool_calls","parseChatCompletion","finish_reason","LengthFinishReasonError","ContentFilterFinishReasonError","toolCall","parseToolCall","content","refusal","parseResponseFormat","type","JSON","parse","inputTool","tools","find","function","name","parsed_arguments","arguments","strict","shouldParseToolCall","some","t","validateInputTools","OpenAIError"],"sources":["C:\\Users\\user\\Desktop\\ReactJS\\chatgpt-clone\\node_modules\\openai\\src\\lib\\parser.ts"],"sourcesContent":["import {\n  ChatCompletion,\n  ChatCompletionCreateParams,\n  ChatCompletionMessageToolCall,\n  ChatCompletionTool,\n} from '../resources/chat/completions';\nimport {\n  ChatCompletionStreamingToolRunnerParams,\n  ChatCompletionStreamParams,\n  ChatCompletionToolRunnerParams,\n  ParsedChatCompletion,\n  ParsedChoice,\n  ParsedFunctionToolCall,\n} from '../resources/beta/chat/completions';\nimport { ResponseFormatJSONSchema } from '../resources/shared';\nimport { ContentFilterFinishReasonError, LengthFinishReasonError, OpenAIError } from \"../error\";\n\ntype AnyChatCompletionCreateParams =\n  | ChatCompletionCreateParams\n  | ChatCompletionToolRunnerParams<any>\n  | ChatCompletionStreamingToolRunnerParams<any>\n  | ChatCompletionStreamParams;\n\nexport type ExtractParsedContentFromParams<Params extends AnyChatCompletionCreateParams> =\n  Params['response_format'] extends AutoParseableResponseFormat<infer P> ? P : null;\n\nexport type AutoParseableResponseFormat<ParsedT> = ResponseFormatJSONSchema & {\n  __output: ParsedT; // type-level only\n\n  $brand: 'auto-parseable-response-format';\n  $parseRaw(content: string): ParsedT;\n};\n\nexport function makeParseableResponseFormat<ParsedT>(\n  response_format: ResponseFormatJSONSchema,\n  parser: (content: string) => ParsedT,\n): AutoParseableResponseFormat<ParsedT> {\n  const obj = { ...response_format };\n\n  Object.defineProperties(obj, {\n    $brand: {\n      value: 'auto-parseable-response-format',\n      enumerable: false,\n    },\n    $parseRaw: {\n      value: parser,\n      enumerable: false,\n    },\n  });\n\n  return obj as AutoParseableResponseFormat<ParsedT>;\n}\n\nexport function isAutoParsableResponseFormat<ParsedT>(\n  response_format: any,\n): response_format is AutoParseableResponseFormat<ParsedT> {\n  return response_format?.['$brand'] === 'auto-parseable-response-format';\n}\n\ntype ToolOptions = {\n  name: string;\n  arguments: any;\n  function?: ((args: any) => any) | undefined;\n};\n\nexport type AutoParseableTool<\n  OptionsT extends ToolOptions,\n  HasFunction = OptionsT['function'] extends Function ? true : false,\n> = ChatCompletionTool & {\n  __arguments: OptionsT['arguments']; // type-level only\n  __name: OptionsT['name']; // type-level only\n  __hasFunction: HasFunction; // type-level only\n\n  $brand: 'auto-parseable-tool';\n  $callback: ((args: OptionsT['arguments']) => any) | undefined;\n  $parseRaw(args: string): OptionsT['arguments'];\n};\n\nexport function makeParseableTool<OptionsT extends ToolOptions>(\n  tool: ChatCompletionTool,\n  {\n    parser,\n    callback,\n  }: {\n    parser: (content: string) => OptionsT['arguments'];\n    callback: ((args: any) => any) | undefined;\n  },\n): AutoParseableTool<OptionsT['arguments']> {\n  const obj = { ...tool };\n\n  Object.defineProperties(obj, {\n    $brand: {\n      value: 'auto-parseable-tool',\n      enumerable: false,\n    },\n    $parseRaw: {\n      value: parser,\n      enumerable: false,\n    },\n    $callback: {\n      value: callback,\n      enumerable: false,\n    },\n  });\n\n  return obj as AutoParseableTool<OptionsT['arguments']>;\n}\n\nexport function isAutoParsableTool(tool: any): tool is AutoParseableTool<any> {\n  return tool?.['$brand'] === 'auto-parseable-tool';\n}\n\nexport function maybeParseChatCompletion<\n  Params extends ChatCompletionCreateParams | null,\n  ParsedT = Params extends null ? null : ExtractParsedContentFromParams<NonNullable<Params>>,\n>(completion: ChatCompletion, params: Params): ParsedChatCompletion<ParsedT> {\n  if (!params || !hasAutoParseableInput(params)) {\n    return {\n      ...completion,\n      choices: completion.choices.map((choice) => ({\n        ...choice,\n        message: { ...choice.message, parsed: null, tool_calls: choice.message.tool_calls ?? [] },\n      })),\n    };\n  }\n\n  return parseChatCompletion(completion, params);\n}\n\nexport function parseChatCompletion<\n  Params extends ChatCompletionCreateParams,\n  ParsedT = ExtractParsedContentFromParams<Params>,\n>(completion: ChatCompletion, params: Params): ParsedChatCompletion<ParsedT> {\n  const choices: Array<ParsedChoice<ParsedT>> = completion.choices.map((choice): ParsedChoice<ParsedT> => {\n    if (choice.finish_reason === 'length') {\n      throw new LengthFinishReasonError();\n    }\n\n    if (choice.finish_reason === 'content_filter') {\n      throw new ContentFilterFinishReasonError();\n    }\n\n    return {\n      ...choice,\n      message: {\n        ...choice.message,\n        tool_calls: choice.message.tool_calls?.map((toolCall) => parseToolCall(params, toolCall)) ?? [],\n        parsed:\n          choice.message.content && !choice.message.refusal ?\n            parseResponseFormat(params, choice.message.content)\n          : null,\n      },\n    };\n  });\n\n  return { ...completion, choices };\n}\n\nfunction parseResponseFormat<\n  Params extends ChatCompletionCreateParams,\n  ParsedT = ExtractParsedContentFromParams<Params>,\n>(params: Params, content: string): ParsedT | null {\n  if (params.response_format?.type !== 'json_schema') {\n    return null;\n  }\n\n  if (params.response_format?.type === 'json_schema') {\n    if ('$parseRaw' in params.response_format) {\n      const response_format = params.response_format as AutoParseableResponseFormat<ParsedT>;\n\n      return response_format.$parseRaw(content);\n    }\n\n    return JSON.parse(content);\n  }\n\n  return null;\n}\n\nfunction parseToolCall<Params extends ChatCompletionCreateParams>(\n  params: Params,\n  toolCall: ChatCompletionMessageToolCall,\n): ParsedFunctionToolCall {\n  const inputTool = params.tools?.find((inputTool) => inputTool.function?.name === toolCall.function.name);\n  return {\n    ...toolCall,\n    function: {\n      ...toolCall.function,\n      parsed_arguments:\n        isAutoParsableTool(inputTool) ? inputTool.$parseRaw(toolCall.function.arguments)\n        : inputTool?.function.strict ? JSON.parse(toolCall.function.arguments)\n        : null,\n    },\n  };\n}\n\nexport function shouldParseToolCall(\n  params: ChatCompletionCreateParams | null | undefined,\n  toolCall: ChatCompletionMessageToolCall,\n): boolean {\n  if (!params) {\n    return false;\n  }\n\n  const inputTool = params.tools?.find((inputTool) => inputTool.function?.name === toolCall.function.name);\n  return isAutoParsableTool(inputTool) || inputTool?.function.strict || false;\n}\n\nexport function hasAutoParseableInput(params: AnyChatCompletionCreateParams): boolean {\n  if (isAutoParsableResponseFormat(params.response_format)) {\n    return true;\n  }\n\n  return (\n    params.tools?.some(\n      (t) => isAutoParsableTool(t) || (t.type === 'function' && t.function.strict === true),\n    ) ?? false\n  );\n}\n\nexport function validateInputTools(tools: ChatCompletionTool[] | undefined) {\n  for (const tool of tools ?? []) {\n    if (tool.type !== 'function') {\n      throw new OpenAIError(\n        `Currently only \\`function\\` tool types support auto-parsing; Received \\`${tool.type}\\``,\n      );\n    }\n\n    if (tool.function.strict !== true) {\n      throw new OpenAIError(\n        `The \\`${tool.function.name}\\` tool is not marked with \\`strict: true\\`. Only strict function tools can be auto-parsed`,\n      );\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}